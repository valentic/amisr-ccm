#!/usr/bin/env python3

##########################################################################
#
#   TS7970 LED control
#
#   Details:
#
#       power:      green
#       activity:   yellow
#       status1:    blue
#       status2:    red
#
#   2023-05-22  Todd Valentic
#               Initial implementation
#
##########################################################################

import re
import os
import sys
import argparse

POWER_LED = '/sys/class/leds/green:power'
ACTIVITY_LED = '/sys/class/leds/yellow:indicator'
STATUS1_LED = '/sys/class/leds/red:status'
STATUS2_LED = '/sys/class/leds/blue:indicator'

#-------------------------------------------------------------------------
# Helper functions
#-------------------------------------------------------------------------

def set_trigger(pathname, trigger):
    filename = os.path.join(pathname,'trigger')
    open(filename,'w').write(trigger)

def get_trigger(pathname):
    filename = os.path.join(pathname,'trigger')
    output = open(filename,'r').read()
    pattern = '\[(.*)\]'

    return re.findall(pattern, output)[0]

def set_brightness(pathname, value):
    filename = os.path.join(pathname,'brightness')
    open(filename,'w').write(str(value))

def get_brightness(pathname):
    filename = os.path.join(pathname,'brightness')
    output = open(filename,'r').read().strip()

    return int(output)

def set_state(pathname, state):
    if state in ['on', 'off']:
        set_trigger(pathname, 'none')
        set_brightness(pathname, int(state=='on'))
    else:
        set_trigger(pathname, state)

def get_state(pathname):
    trigger = get_trigger(pathname)
    if trigger != 'none':
        return trigger

    value = get_brightness(pathname)
    return 'on' if value > 0 else 'off'

#-------------------------------------------------------------------------
# Command Processors 
#-------------------------------------------------------------------------

def ProcessSet(args):

    if args.device == 'power' or args.device == 'all':
        set_state(POWER_LED, args.state)

    if args.device == 'activity' or args.device == 'all':
        set_state(ACTIVITY_LED, args.state)
    
    if args.device == 'status1' or args.device == 'all':
        set_state(STATUS1_LED, args.state)
    
    if args.device == 'status2' or args.device == 'all':
        set_state(STATUS2_LED, args.state)

    return 0

def ProcessStatus(args):
    print('[LED]')
    print('power: %s' % get_state(POWER_LED)) 
    print('activity: %s' % get_state(ACTIVITY_LED)) 
    print('status1: %s' % get_state(STATUS1_LED)) 
    print('status2: %s' % get_state(STATUS2_LED)) 
    return 0

def ProcessReset(args):
    #set_trigger(POWER_LED, 'actpwr')
    #set_trigger(ACTIVITY_LED, 'mmc0')
    set_state(POWER_LED, 'on')
    set_state(ACTIVITY_LED, 'off')
    set_state(STATUS1_LED, 'off')
    set_state(STATUS2_LED, 'off')
    return 0

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

Commands = {
    'set':      ProcessSet,
    'status':   ProcessStatus,
    'reset':    ProcessReset
}

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='LED Control (TS7970)')
    subparsers = parser.add_subparsers(dest='command', required=True)

    set_parser = subparsers.add_parser('set')
    set_parser.add_argument('device',
        choices=['power', 'activity', 'status1', 'status2', 'all'])
    set_parser.add_argument('state', help="on|off|<trigger>")
        #choices=['on','off'])

    status_parser = subparsers.add_parser('status')
    reset_parser = subparsers.add_parser('reset')

    args = parser.parse_args()

    result = Commands[args.command](args)

    sys.exit(result)
